import java_cup.runtime.*;
import java.io.*;
import java.time.LocalDate;

parser code {:

    // --- COMPILERS -- UNIVERSITAT OBERTA DE CATALUNYA
    // --- Activity 2 - Syntactic analysis analysis
    //
    // STUDENT FULL NAME:
    // UOC USERNAME:
    // COURSE INSTRUCTOR:

    // Add any attributes to the parser (if you need them) here


    // Add any code that you would like to execute before the parser begins
    // Here you can initialize any variables you require
    // There is no need to modify this funcion if you don't need it!
    public static void initParser() {

    }

    // Add any code that you would like to execute after the parser ends
    // There is no need to modify this function if you don't need it!
    public static void endParser() {


    }


:}

terminal DATASET, PREPARATION, COLUMN, FEATURE, DELETE, BOOLEAN, INT, FLOAT, STRING, DATE;
terminal AND, OR, NOT, DIV, IF, THEN, ELSE, END, TRUE, FALSE, TODAY;
terminal EQ, NEQ, LT, GT, LEQ, GEQ, PLUS, MINUS, TIMES, NEG;
terminal OPEN_KEY, CLOSE_KEY, OPEN_PAREN, CLOSE_PAREN, COMMA, COLON;
terminal String  IDENT;
terminal LocalDate DATE_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal Integer INT_LITERAL;
terminal String  STRING_LITERAL;

non terminal file;
non terminal dataset;
non terminal column;
non terminal column_type;
non terminal preparation;
non terminal delete_column;
non terminal expression;
non terminal ex_constant;
non terminal ex_ident;
non terminal ex_function;
non terminal ex_boolean;
non terminal number;
non terminal ex_arithmetic;
non terminal ex_relational;

file ::= 
    DATASET IDENT:id OPEN_KEY dataset CLOSE_KEY {: Eval.emitDatasetDecl(id.toString ()); :} 
    | DATASET IDENT:id OPEN_KEY dataset CLOSE_KEY {: Eval.emitDatasetDecl(id.toString ()); :} file
  ;

dataset ::= 
    | COLUMN column {: Eval.emitColumnDecl(); :} dataset
    | PREPARATION OPEN_KEY preparation {: Eval.emitPreparation(); :} CLOSE_KEY
  ;

column ::= 
    IDENT COLON column_type
    | IDENT COMMA column
  ;

column_type ::=
    BOOLEAN
    | INT
    | FLOAT 
    | STRING
    | DATE
  ;

preparation ::=
    | DELETE IF expression {: Eval.emitDeleteIfCmd(); :} preparation
    | DELETE COLUMN delete_column {: Eval.emitDeleteIfCmd(); :} preparation
    | FEATURE IDENT:name COLON expression {: Eval.emitFeature(name.toString()); :} preparation
  ;

delete_column ::= 
    IDENT
    | IDENT COMMA delete_column
 ;

expression ::= 
    ex_constant
    | ex_ident 
    | ex_function
    | ex_boolean
    | ex_arithmetic
    | ex_relational
  ;

ex_constant ::=
    TRUE {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | FALSE {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | TODAY {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | DATE_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | INT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | FLOAT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | STRING_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
  ;

ex_ident ::=
    FLOAT EQ FLOAT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | INT EQ INT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
  ;

ex_function ::=
    IDENT OPEN_PAREN IDENT CLOSE_PAREN
  ;

ex_boolean ::=
    NOT expression
   // | expression AND expression
   // | expression OR expression
  ;

ex_arithmetic ::=
    MINUS number
    | number PLUS number
    | number TIMES number
    | number DIV number
  ;

ex_relational ::=
    number EQ number
    | number NEQ number
    | number LT number
    | number GT number
    | number LEQ number
    | number GEQ number
  ;

number ::= 
    INT_LITERAL
    | FLOAT_LITERAL
  ;
