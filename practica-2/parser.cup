import java_cup.runtime.*;
import java.io.*;
import java.time.LocalDate;

parser code {:

    // --- COMPILERS -- UNIVERSITAT OBERTA DE CATALUNYA
    // --- Activity 2 - Syntactic analysis analysis
    //
    // STUDENT FULL NAME:
    // UOC USERNAME:
    // COURSE INSTRUCTOR:

    // Add any attributes to the parser (if you need them) here


    // Add any code that you would like to execute before the parser begins
    // Here you can initialize any variables you require
    // There is no need to modify this funcion if you don't need it!
    public static void initParser() {

    }

    // Add any code that you would like to execute after the parser ends
    // There is no need to modify this function if you don't need it!
    public static void endParser() {


    }


:}

terminal DATASET, PREPARATION, COLUMN, FEATURE, DELETE, BOOLEAN, INT, FLOAT, STRING, DATE;
terminal AND, OR, NOT, DIV, IF, THEN, ELSE, END, TRUE, FALSE, TODAY;
terminal EQ, NEQ, LT, GT, LEQ, GEQ, PLUS, MINUS, TIMES, NEG;
terminal OPEN_KEY, CLOSE_KEY, OPEN_PAREN, CLOSE_PAREN, COMMA, COLON;
terminal String  IDENT;
terminal LocalDate DATE_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal Integer INT_LITERAL;
terminal String  STRING_LITERAL;

non terminal file;
non terminal dataset;
non terminal column;
non terminal preparation;
non terminal delete_column;
non terminal feature;
non terminal type;
non terminal expression, subexpression;
non terminal ex_constant;
non terminal ex_ident;
non terminal ex_function;
non terminal ex_boolean_binary, ex_boolean_unary, boolean_operands;
non terminal ex_arithmetic_binary, ex_arithmetic_dos, arithmetic_operands;
non terminal ex_relational_binary;
non terminal ex_conditional;

precedence left AND, OR;
precedence left GEQ, LEQ, GT, LT;
precedence left EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left NOT, NEG;


file ::= 
    DATASET IDENT:id OPEN_KEY dataset CLOSE_KEY {: Eval.emitDatasetDecl(id.toString()); :} 
    | DATASET IDENT:id OPEN_KEY dataset CLOSE_KEY {: Eval.emitDatasetDecl(id.toString()); :}  file
  ;

/*
* Dataset encontrado.
*/
dataset ::= 
    | COLUMN column {: Eval.emitColumnDecl(); :} dataset
    | PREPARATION OPEN_KEY preparation CLOSE_KEY {: Eval.emitPreparation(); :} dataset
  ;

/*
* Columna de un dataset.
*/
column ::=
    IDENT COLON type
    | IDENT COMMA column
  ;

/*
* Tipos de datos. Sirve para definir columnas o eliminarlas.
*/
type ::=
    BOOLEAN
    | INT
    | FLOAT
    | STRING
    | DATE
  ;

/*
* Bloque preparation del dataset.
*/
preparation ::=
    | DELETE IF expression {: Eval.emitDeleteIfCmd(); :} preparation
    | DELETE COLUMN delete_column {: Eval.emitDeleteColumnCmd(); :} preparation
    | FEATURE IDENT:name feature {: Eval.emitFeature(name.toString()); :} preparation
  ;

delete_column ::=
    IDENT
    | IDENT COMMA delete_column
  ;

feature ::=
    COLON type EQ expression
  ;

expression ::=
    expression subexpression
    | subexpression
  ;

subexpression ::=
    ex_constant
    | NOT ex_constant
    | MINUS ex_constant   
    | ex_ident
    | NOT ex_ident  
    | MINUS ex_ident
    | subexpression ex_boolean_binary subexpression  
    | subexpression ex_arithmetic_binary subexpression  
    | subexpression ex_relational_binary subexpression  
    | ex_conditional
 ;


ex_constant ::=
    TRUE {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | FALSE {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | TODAY {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | DATE_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | INT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | FLOAT_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
    | STRING_LITERAL {: Eval.emitSubexpression(Eval.Subexpression.LITERAL); :}
  ;

ex_boolean_binary ::=
    AND {: Eval.emitSubexpression(Eval.Subexpression.AND); :}
    | OR {: Eval.emitSubexpression(Eval.Subexpression.OR); :}
  ;

ex_ident ::=
    IDENT {: Eval.emitSubexpression(Eval.Subexpression.IDENT); :}
  ;

ex_arithmetic_binary ::=
    PLUS {: Eval.emitSubexpression(Eval.Subexpression.PLUS); :}
    | MINUS {: Eval.emitSubexpression(Eval.Subexpression.MINUS); :}
    | TIMES {: Eval.emitSubexpression(Eval.Subexpression.TIMES); :}
    | DIV {: Eval.emitSubexpression(Eval.Subexpression.DIV); :}
 ;

ex_relational_binary ::=
    GEQ {: Eval.emitSubexpression(Eval.Subexpression.GEQ); :}
    | GT {: Eval.emitSubexpression(Eval.Subexpression.GT); :}
    | LEQ {: Eval.emitSubexpression(Eval.Subexpression.LEQ); :}
    | LT {: Eval.emitSubexpression(Eval.Subexpression.LT); :}
    | EQ {: Eval.emitSubexpression(Eval.Subexpression.EQ); :}
    | NEQ {: Eval.emitSubexpression(Eval.Subexpression.NEQ); :}
  ;

ex_conditional ::=
    IF subexpression THEN subexpression ELSE subexpression END {: Eval.emitSubexpression(Eval.Subexpression.IFTHENELSE); :}
  ;
