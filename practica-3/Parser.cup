import java_cup.runtime.*;
import java.io.*;
import java.time.LocalDate;
import java.util.*;

parser code {:

    // --- COMPILERS -- UNIVERSITAT OBERTA DE CATALUNYA
    // --- Activity 3 - Semantic analysis
    //
    // STUDENT FULL NAME:
    // UOC USERNAME:
    // COURSE INSTRUCTOR:

    // Add any attributes to the parser (if you need them) here
    public static class Scope{
      // Blocks are stored in a stack, so each element are independent from
      // other blocks. It's a way to control the scope of an element.
      private Stack<HashMap<String, Eval.Type>> tokenStack;

      // Constructor. Initialize atributes.
      public Scope(){
        tokenStack = new Stack();
      }

      // Each time a new block comes we store it in the stack.
      public void init(){
        HashMap<String, Eval.Type> hm = new HashMap<String, Eval.Type>();
        tokenStack.push(hm);
      }

      // Each time a block ends we delete the data related to it.
      public void finish(){
        tokenStack.pop();
      }

      // Add an element to the hashmap of the current stack element.
      public void add(String elem, Eval.Type type){
        tokenStack.peek().put(elem, type);
      }

      // Check if an element exists in the current scope.
      public boolean contains(String elem){
        return tokenStack.peek().containsKey(elem);
      }

      // Get type of an elem
      public Eval.Type getIdType(String id){
        return tokenStack.peek().get(id);
      }
    }

    // Symbol table.
    private static Scope table;

    // Add any code that you would like to execute before the parser begins
    // Here you can initialize any variables you require
    // You may need to use it to initalize the symbol table(s)
    public static void initParser() {
      table = new Scope();
      table.init();
    }

    // Add any code that you would like to execute after the parser ends
    // There is no need to modify this function if you don't need it!
    public static void endParser() {
      table.finish();
    }

    // Initialize the scope.
    public void initScope(){
      table.init();
    }
    
    // Finish the scope.
    public void finishScope(){
      table.finish();
    }
    
    // Check if a dataset is duplicated.
    public void checkDuplicateDataset(String datasetName){
      if(table.contains(datasetName)){
        Eval.emitDuplicateDatasetError(datasetName);
      } else {
        Eval.emitDatasetDecl(datasetName);
        table.add(datasetName, null);
      }
    }

    // Check if column is duplicated.
    public void checkDuplicateColumn(String id, Eval.Type type){
      if(table.contains(id)){
        Eval.emitDuplicateIdentError(id);
      } else {
        Eval.emitColumnDecl(id, type);
        table.add(id, type);
      }
    }
    
    // Check if feature is duplicated.
    public void checkDuplicateFeature(String id, Eval.Type type){
      if(table.contains(id)){
        Eval.emitDuplicateIdentError(id);
      } else {
        Eval.emitFeatureDecl(id, type);
        table.add(id, type);
      }
    }

    // Check if the ID is declared or not.
    public boolean checkDeclaredId(String id){
      boolean result = true;
      if(!table.contains(id)){
        Eval.emitUndeclaredIdentError(id);
        result = false;
      } 
      return result;
    }

    // Check if boolean expression
    public Eval.Type checkIfBoolean(Eval.Type type){
      Eval.Type expectedType = Eval.Type.BOOLEAN;
      if(type != expectedType){
        Eval.emitTypeMismatchError(expectedType, type);
      }
      return expectedType;
    }
    
    // Check if boolean expression
    public Eval.Type checkIfBoolean(Eval.Type type1, Eval.Type type2){
      Eval.Type expectedType = Eval.Type.BOOLEAN;
      if(type1 != expectedType){
        Eval.emitTypeMismatchError(expectedType, type1);
      }
      if(type2 != expectedType){
        Eval.emitTypeMismatchError(expectedType, type2);
      }
      return expectedType;
    }

    // Returns the type of an ID
    public Eval.Type getIdType(String id){
      return table.getIdType(id);
    }

    // Check the type of two expressions match
    public Eval.Type checkMatchTypes(Eval.Type type1, Eval.Type type2){
      if(type1 != type2 && type1!= null && type2!=null){
        Eval.emitTypeMismatchError(type1, type2);
      }
      return Eval.Type.BOOLEAN;
    }

:}

terminal DATASET, PREPARATION, COLUMN, FEATURE, DELETE, BOOLEAN, INT, FLOAT, STRING, DATE;
terminal AND, OR, NOT, DIV, IF, THEN, ELSE, END, TRUE, FALSE, TODAY;
terminal EQ, NEQ, LT, GT, LEQ, GEQ, PLUS, MINUS, TIMES, NEG;
terminal OPEN_KEY, CLOSE_KEY, OPEN_PAREN, CLOSE_PAREN, COMMA, COLON;
terminal String  IDENT;
terminal LocalDate DATE_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal Integer INT_LITERAL;
terminal String  STRING_LITERAL;

non terminal dataset_list, dataset_decl;
non terminal column_opt, column_list, column_decl, ident_list, type_decl; 
non terminal preparation_decl, preparation_opt;
non terminal cmd_opt, feature_opt, cmd_list, cmd_decl, feature_list, feature_decl;
non terminal expression, literal_expression;

precedence left AND, OR;
precedence left LEQ, LT, GEQ, GT;
precedence left EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left NEG, NOT;


dataset_list ::=
    dataset_decl
  | dataset_list dataset_decl
  ;

dataset_decl ::= 
    DATASET IDENT:id OPEN_KEY 
    {: parser.initScope(); :} 
      column_opt preparation_opt 
    {: parser.finishScope(); :} CLOSE_KEY
    {: parser.checkDuplicateDataset(id); :}
  ; 

column_opt ::=
    {: /* Empty column list declaration */ :}
  | column_list
  ;

column_list ::=
    column_decl
  | column_list column_decl
  ;

column_decl ::=
    COLUMN ident_list:idList COLON type_decl:type
    {:
      ArrayList list = (ArrayList) idList;
      for(Object id : list){
        parser.checkDuplicateColumn((String) id, (Eval.Type) type);
      }
    :}
  ;

ident_list ::=
    IDENT:id {: RESULT = new ArrayList(Arrays.asList(id)); :}
  | ident_list:idList COMMA IDENT:id 
    {:  
      ArrayList list = (ArrayList) idList;
      list.add(id);
      RESULT = list;
    :}   
  ;

type_decl ::=
    BOOLEAN {: RESULT = Eval.Type.BOOLEAN; :} 
  | INT {: RESULT = Eval.Type.INT; :}
  | FLOAT {: RESULT = Eval.Type.FLOAT; :}
  | STRING {: RESULT = Eval.Type.STRING; :}
  | DATE {: RESULT = Eval.Type.DATE; :}
  ;

preparation_opt ::=
    {: /* Nothing */ :}
  | preparation_decl
  ;

preparation_decl ::=
    PREPARATION OPEN_KEY cmd_opt feature_opt CLOSE_KEY
  ;

cmd_opt ::=
    {: /* Empty command list */ :} 
  | cmd_list
  ;

feature_opt ::=
    {: /* Empty feature list */ :}
  | feature_list
  ;

cmd_list ::=
    cmd_decl
  | cmd_list cmd_decl 
  ;

feature_list ::=
    feature_decl
  | feature_list feature_decl
  ;

cmd_decl ::=
    DELETE IF expression:expr {: parser.checkIfBoolean((Eval.Type) expr); :}
  | DELETE COLUMN ident_list:idList
  {:
    ArrayList list = (ArrayList) idList;
    for(Object id : list){
      parser.checkDeclaredId((String) id);
    }
  :} 
  ;

feature_decl ::= 
    FEATURE IDENT:id COLON type_decl:type EQ expression:expr  
    {:
      if(expr != null && type != null){
        parser.checkMatchTypes((Eval.Type) type, (Eval.Type) expr);
      }
      parser.checkDuplicateFeature(id, (Eval.Type) type); 
    :}
  ;

literal_expression ::=
    TRUE {: RESULT = Eval.Type.BOOLEAN; :}
  | FALSE {: RESULT = Eval.Type.BOOLEAN; :}
  | TODAY {: RESULT = Eval.Type.DATE; :}
  | INT_LITERAL {: RESULT = Eval.Type.INT; :}
  | FLOAT_LITERAL {: RESULT = Eval.Type.FLOAT; :}
  | STRING_LITERAL {: RESULT = Eval.Type.STRING; :}
  | DATE_LITERAL {: RESULT = Eval.Type.DATE; :}
  ;

expression ::=
    literal_expression:expr {: RESULT = expr; :}
  
  | IDENT:id 
    {:
      boolean declared = parser.checkDeclaredId(id); 
      if(declared){
        RESULT = parser.getIdType(id);
      }
    :}
  
  | OPEN_PAREN expression:expr CLOSE_PAREN {: RESULT = expr; :}
  
  | IDENT OPEN_PAREN expression CLOSE_PAREN

  | IF expression THEN expression ELSE expression END

  | NOT expression:expr {: RESULT = parser.checkIfBoolean((Eval.Type) expr); :}
  | expression:expr1 AND expression:expr2 {: RESULT = parser.checkIfBoolean((Eval.Type) expr1, (Eval.Type) expr2); :}
  | expression:expr1 OR expression:expr2 {: RESULT = parser.checkIfBoolean((Eval.Type) expr1, (Eval.Type) expr2); :}

  | MINUS expression  
  | expression PLUS expression
  | expression MINUS expression
  | expression TIMES expression
  | expression DIV expression
  
  | expression:expr1 EQ expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  | expression:expr1 NEQ expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  | expression:expr1 GT expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  | expression:expr1 LT expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  | expression:expr1 GEQ expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  | expression:expr1 LEQ expression:expr2 {: RESULT = parser.checkMatchTypes((Eval.Type) expr1,(Eval.Type) expr2); :}
  ;
